# Represents Campaign
type Campaign {
  # The ID of an object
  id: ID!
  _id: String
  title: String
  slug: String
  slogan: String
  bg: String
}

input CampaignAddInput {
  title: String!
  slug: String!
  slogan: String!
  bg: String!
  clientMutationId: String
}

type CampaignAddPayload {
  campaignEdge: CampaignEdge
  error: String
  clientMutationId: String
}

# A connection to a list of items.
type CampaignConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CampaignEdge]
}

# An edge in a connection.
type CampaignEdge {
  # The item at the end of the edge
  node: Campaign

  # A cursor for use in pagination
  cursor: String!
}

input CampaignEditInput {
  id: ID!
  title: String!
  slug: String!
  slogan: String!
  bg: String!
  clientMutationId: String
}

type CampaignEditPayload {
  campaign: Campaign
  error: String
  clientMutationId: String
}

input ChangePasswordInput {
  oldPassword: String!

  # user new password
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  me: Me
  clientMutationId: String
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

# Object with data related and only available to the logged user
type Me implements Node {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

type Mutation {
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  PostAdd(input: PostAddInput!): PostAddPayload
  PostEdit(input: PostEditInput!): PostEditPayload
  CampaignAdd(input: CampaignAddInput!): CampaignAddPayload
  CampaignEdit(input: CampaignEditInput!): CampaignEditPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Represents Post
type Post {
  # The ID of an object
  id: ID!
  _id: String
  title: String
  type: String
  text: String
  file: String
  classe: String
}

input PostAddInput {
  title: String!
  type: String!
  text: String!
  file: String
  classe: String
  clientMutationId: String
}

type PostAddPayload {
  postEdge: PostEdge
  error: String
  clientMutationId: String
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

input PostEditInput {
  id: ID!
  title: String!
  type: String!
  text: String!
  file: String
  classe: String
  clientMutationId: String
}

type PostEditPayload {
  post: Post
  error: String
  clientMutationId: String
}

# The root of all... queries
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

input RegisterEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

# User data
type User implements Node {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  count: Int
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

# ...
type Viewer implements Node {
  # The ID of an object
  id: ID!
  me: Me
  user(id: ID!): User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  post(id: ID!): Post
  posts(after: String, first: Int, before: String, last: Int, search: String): PostConnection
  campaign(id: ID!): Campaign
  campaigns(after: String, first: Int, before: String, last: Int, search: String): CampaignConnection
}
